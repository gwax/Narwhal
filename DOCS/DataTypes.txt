Basic data types:

KList - a list of keywords with special symbols for dis-ambiguation
KLists manage finding single text tokens in keyword lists. Note that ALL tokens are scanned each time ONE single token index is examined for matching. [Allows matching to invove multiple consecutive tokens].


VAR - wraps a KList and manages finding consecutive tokens in text. The VAR keeps a 'found' bool and an 'ifound'array of token indices found to match during a read operation. The VARs can be connected using the sub() method. So A.sub(B) means B is a child of A. Sometimes the 'found' remains True, while the ifound[] is emptied and re-used. If B has found=True and A has found=False and A.sub(B), then A has a 'foundInChildren'.

VAR also implements a polarity 'value' which can represent True/False or Good/Bad or whatever. When two KLists represent mutually exclusive possibilities are exclusive 'or'd into to the same VAR the first one listed is automatically considered as positive polarity. If the second is found, that automatically becomes a negative polarity. You can ignore this here and fix it later with 'calibration'.

VAR supports '|' as exclusive OR - to create a VAR from two others regarded as mutually exclusive. It can be used mutliply, like this:  A|(B|C), but this behaves as A|B|C with anything found other than A producing a negative polarity.

NAR - is a formula with VARs for variables. Special operators for combinations and nesting are used. In Particular a NAR has four sub narratives: thing, relation, action, value. If un-used these are set to NULL_VAR, otherwise they can be complete sub NARs. MOre complicated NARs are built from simpler ones using "operations" for 'attribute', 'event', 'trasformation', and 'sequence'.


NarRecord - A temporary snapshot of a NAR. This implements the goodness of fit gof() formula


NarReadData - a NAR, a vault of NarRecors, and scratchpads for reading. [THis has suspect ontology. It exists in order to simplfy certain implementations.]


calibration - means switching the polarity of a nar at the last moment. This is mainly so you
do not have to be too consistent when defining exclusive VARs.


Readers (V1)
-------
The recursive ReadText(nar, tokens, ifound) sits at the base of the reading concepts. It is applied between control words (like 'AND' and 'NOT').

ABReader implements a single NAR and its use in ReadText(). Results are converted to NarRecords and stored in a single NarVault.

NWReader implements the same logic as the ABReader but with an array of NarReadData's. This keeps the code in parallel with ABReader, simple operations 'X()' are replaced by 'XMany()'.


NWObject - wraps the NWReader, applies final thresholds and summarizes a reading event. The NWObject is a single point of entry to Narwhal

-----------
Readers (V2)
In version 2 of Narwhal the tokenized text concept is replaced with a segmented text concept. A segment is a sequence of VARs that is filled progressively while stepping through the tokens. This is a fundamental pre-processing allowed, not because of its phiosophical correctness, but for speedups. In V1 the readTex() method was spending all its time looking up the same variables over and over. In V2 the readText() only looks up words once to create the 'segment' and then spends all its time dealing with the nar logic.
Use printSEG2( seg )

In V2 the NWReader is replaced by the NWSReader. The NWObject is replaced by the NWApp.



Application
-----------
The NoiseApp.py example is a V1 application that consists of an tree, a collection of several narratives and corresponding calibrations and thresholds. These initializers create one NWObject.
