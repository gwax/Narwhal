Narhwal is for reading topic specific text. The tutorial below covers some of the main points of the NWSReader class.

You initialize an NWSReader with:

 - A collection of **keyword lists** (each list defines a "variable" which can be thought of as a dimension.)
 - A collection of **narrative patterns** (each one is a formula defining a relation
between the variables)


The syntax for constructing an NWReader is:

	N = NSWReader( variables, formulas )

The syntax for reading text is:

	N.readText(text)

The class N contains a "vault" of saved instances of the formulas. After a read, the vault
inside N will contain records of how the narratives formulas were found in the text, along with a
"goodnesss of fit" score between narratives and text. You can act on these records or summarize
them as entries in a database. [HYPE: Note that whether the keyword lists and narratives were
discovered by examining examples manually or through machine learning, these read operations
will be completely transparent and tune-able.]


Example: fruit quality
----------------------
----------------
CREATE VARIABLES
----------------
Start by creating keyword lists (you will add more words later)

	kGOOD = {good, great, wonderful, high quality}
	kBAD  = {bad, terrible, sucks, low quality}

	kFRUIT = {fruit}
	kAPPLE = {apple, macintosh, granny smith, gala}
	kORANGE= {orange}


Create variables from these lists:

	GOOD = kGOOD.var()
	BAD = kBAD.var()
	QUALITY = (GOOD | BAD) # create an 'exclusive' variable

	APPLE = kAPPLE.var()
	ORANGE = kORANGE.var()
	FRUIT = kFRUIT.var()   # create one variable with its own word list and 2 children


Organize into a tree by grouping, as follows:

	FRUIT.sub(APPLE)
	FRUIT.sub(ORANGE)

	FRUITQ = kFRUITQ.var()
	FRUITQ.sub(FRUIT)
	FRUITQ.sub(QUALITY)


This creates a tree with keyword lists for nodes and structure like this:

	FRUITQ()
	    FRUIT()
                APPLE()
                ORANGE()
            QUALITY(GOOD|BAD)

-----------------------------
CREATE NARRATIVES ("formuas")
-----------------------------
The simplest narrative is 'thing has attribute". In this case:

	fruitqual = attribute(FRUIT,QUALITY)


------------------------
CREATE A NARWHAL READER
------------------------
You can write:

	N = NWSReader( FRUITQ, [fruitqual])

Then read sentences of 'text' like "we had a short breakfast because the oranges were bad". This
will fill a vault in NWReader using:

	N.readText(text)

To reverse the polarity of the output use

	N.setCalibration([True])


For more complicated examples see "btest.py" and "NoiseApp.py".
